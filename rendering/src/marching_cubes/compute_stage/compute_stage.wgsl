struct VoxelVolume {
    min_bound: vec3<f32>,
    max_bound: vec3<f32>,
    voxel_size: f32,
};

@group(0) @binding(0) var<storage, read_write> output: array<vec3<f32>>;
@group(0) @binding(1) var<uniform> volume: VoxelVolume;

//
// Lookup Tables for Marching Cubes
//
// These tables differ from the original paper (Marching Cubes: A High Resolution 3D Surface Construction Algorithm)
//
// The co-ordinate system has the more convenient properties:
//
//    i = cube index [0, 7]
//    x = (i & 1) >> 0
//    y = (i & 2) >> 1
//    z = (i & 4) >> 2
//
// Vertex and edge layout:
//
//            7             6
//            +-------------+               +-----6-------+   
//          / |           / |             / |            /|   
//        /   |         /   |          10   5         11   7
//    3 +-----+-------+  2  |         +-----+2------+     |   
//      |   5 +-------+-----+ 4       |     +-----4-+-----+   
//      |   /         |   /           1   9         3   8
//      | /           | /             | /           | /       
//    1 +-------------+ 0             +------0------+         
//
// Triangulation cases are generated prioritising rotations over inversions, which can introduce non-manifold geometry.
//

// Pair of vertex indices for each edge on the cube
const EDGE_VERTEX_IDS: array<vec2<u32>, 12> = array(
    vec2<u32>(0, 1),
    vec2<u32>(1, 3),
    vec2<u32>(3, 2),
    vec2<u32>(2, 0),
    vec2<u32>(4, 5),
    vec2<u32>(5, 7),
    vec2<u32>(7, 6),
    vec2<u32>(6, 4),
    vec2<u32>(0, 4),
    vec2<u32>(1, 5),
    vec2<u32>(3, 7),
    vec2<u32>(2, 6),
);

// to calculate count, use T[i] - T[max(i-1, 0)]
const TRIANGLE_OFFSET_TABLE: array<u32, 256> = array(
    // 0 first offset is always zero
    0,3,6,12,15,21,27,36,39,45,51,60,66,75,84,90,93,99,105,114,120,129,138,150,156,165,174,186,195,207,219,228,231,237,243,252,258,267,276,288,294,303,312,324,333,345,357,366,372,381,390,396,405,417,429,438,447,459,471,480,492,501,510,516,519,525,531,540,546,555,564,576,582,591,600,612,621,633,645,654,660,669,678,690,699,705,717,726,735,747,759,768,780,789,798,804,810,819,828,840,849,861,873,882,891,903,915,924,936,945,954,960,969,981,993,1002,1014,1023,1032,1038,1050,1059,1068,1074,1083,1089,1095,1098,1101,1107,1113,1122,1128,1137,1146,1158,1164,1173,1182,1194,1203,1215,1227,1236,1242,1251,1260,1272,1281,1293,1305,1314,1323,1335,1347,1356,1368,1377,1386,1392,1398,1407,1416,1428,1437,1449,1461,1470,1479,1491,1497,1506,1518,1527,1536,1542,1551,1563,1575,1584,1596,1605,1614,1620,1632,1641,1650,1656,1665,1671,1677,1680,1686,1695,1704,1716,1725,1737,1749,1758,1767,1779,1791,1800,1806,1815,1824,1830,1839,1851,1863,1872,1884,1893,1902,1908,1920,1929,1938,1944,1953,1959,1965,1968,1977,1989,2001,2010,2022,2031,2040,2046,2058,2067,2076,2082,2091,2097,2103,2106,2112,2121,2130,2136,2145,2151,2157,2160,2169,2175,2181,2184,2190,2193,2196,2196
);

const TRIANGLE_TABLE: array<u32, 2197> = array(
    // First empty 
	0, 3, 8,
	0, 9, 1,
	3, 8, 1, 1, 8, 9,
	2, 11, 3,
	8, 0, 11, 11, 0, 2,
	3, 2, 11, 1, 0, 9,
	11, 1, 2, 11, 9, 1, 11, 8, 9,
	1, 10, 2,
	0, 3, 8, 2, 1, 10,
	10, 2, 9, 9, 2, 0,
	8, 2, 3, 8, 10, 2, 8, 9, 10,
	11, 3, 10, 10, 3, 1,
	10, 0, 1, 10, 8, 0, 10, 11, 8,
	9, 3, 0, 9, 11, 3, 9, 10, 11,
	8, 9, 11, 11, 9, 10,
	4, 8, 7,
	7, 4, 3, 3, 4, 0,
	4, 8, 7, 0, 9, 1,
	1, 4, 9, 1, 7, 4, 1, 3, 7,
	8, 7, 4, 11, 3, 2,
	4, 11, 7, 4, 2, 11, 4, 0, 2,
	0, 9, 1, 8, 7, 4, 11, 3, 2,
	7, 4, 11, 11, 4, 2, 2, 4, 9, 2, 9, 1,
	4, 8, 7, 2, 1, 10,
	7, 4, 3, 3, 4, 0, 10, 2, 1,
	10, 2, 9, 9, 2, 0, 7, 4, 8,
	10, 2, 3, 10, 3, 4, 3, 7, 4, 9, 10, 4,
	1, 10, 3, 3, 10, 11, 4, 8, 7,
	10, 11, 1, 11, 7, 4, 1, 11, 4, 1, 4, 0,
	7, 4, 8, 9, 3, 0, 9, 11, 3, 9, 10, 11,
	7, 4, 11, 4, 9, 11, 9, 10, 11,
	9, 4, 5,
	9, 4, 5, 8, 0, 3,
	4, 5, 0, 0, 5, 1,
	5, 8, 4, 5, 3, 8, 5, 1, 3,
	9, 4, 5, 11, 3, 2,
	2, 11, 0, 0, 11, 8, 5, 9, 4,
	4, 5, 0, 0, 5, 1, 11, 3, 2,
	5, 1, 4, 1, 2, 11, 4, 1, 11, 4, 11, 8,
	1, 10, 2, 5, 9, 4,
	9, 4, 5, 0, 3, 8, 2, 1, 10,
	2, 5, 10, 2, 4, 5, 2, 0, 4,
	10, 2, 5, 5, 2, 4, 4, 2, 3, 4, 3, 8,
	11, 3, 10, 10, 3, 1, 4, 5, 9,
	4, 5, 9, 10, 0, 1, 10, 8, 0, 10, 11, 8,
	11, 3, 0, 11, 0, 5, 0, 4, 5, 10, 11, 5,
	4, 5, 8, 5, 10, 8, 10, 11, 8,
	8, 7, 9, 9, 7, 5,
	3, 9, 0, 3, 5, 9, 3, 7, 5,
	7, 0, 8, 7, 1, 0, 7, 5, 1,
	7, 5, 3, 3, 5, 1,
	5, 9, 7, 7, 9, 8, 2, 11, 3,
	2, 11, 7, 2, 7, 9, 7, 5, 9, 0, 2, 9,
	2, 11, 3, 7, 0, 8, 7, 1, 0, 7, 5, 1,
	2, 11, 1, 11, 7, 1, 7, 5, 1,
	8, 7, 9, 9, 7, 5, 2, 1, 10,
	10, 2, 1, 3, 9, 0, 3, 5, 9, 3, 7, 5,
	7, 5, 8, 5, 10, 2, 8, 5, 2, 8, 2, 0,
	10, 2, 5, 2, 3, 5, 3, 7, 5,
	8, 7, 5, 8, 5, 9, 11, 3, 10, 3, 1, 10,
	5, 11, 7, 10, 11, 5, 1, 9, 0,
	11, 5, 10, 7, 5, 11, 8, 3, 0,
	5, 11, 7, 10, 11, 5,
	6, 7, 11,
	7, 11, 6, 3, 8, 0,
	6, 7, 11, 0, 9, 1,
	9, 1, 8, 8, 1, 3, 6, 7, 11,
	3, 2, 7, 7, 2, 6,
	0, 7, 8, 0, 6, 7, 0, 2, 6,
	6, 7, 2, 2, 7, 3, 9, 1, 0,
	6, 7, 8, 6, 8, 1, 8, 9, 1, 2, 6, 1,
	11, 6, 7, 10, 2, 1,
	3, 8, 0, 11, 6, 7, 10, 2, 1,
	0, 9, 2, 2, 9, 10, 7, 11, 6,
	6, 7, 11, 8, 2, 3, 8, 10, 2, 8, 9, 10,
	7, 10, 6, 7, 1, 10, 7, 3, 1,
	8, 0, 7, 7, 0, 6, 6, 0, 1, 6, 1, 10,
	7, 3, 6, 3, 0, 9, 6, 3, 9, 6, 9, 10,
	6, 7, 10, 7, 8, 10, 8, 9, 10,
	11, 6, 8, 8, 6, 4,
	6, 3, 11, 6, 0, 3, 6, 4, 0,
	11, 6, 8, 8, 6, 4, 1, 0, 9,
	1, 3, 9, 3, 11, 6, 9, 3, 6, 9, 6, 4,
	2, 8, 3, 2, 4, 8, 2, 6, 4,
	4, 0, 6, 6, 0, 2,
	9, 1, 0, 2, 8, 3, 2, 4, 8, 2, 6, 4,
	9, 1, 4, 1, 2, 4, 2, 6, 4,
	4, 8, 6, 6, 8, 11, 1, 10, 2,
	1, 10, 2, 6, 3, 11, 6, 0, 3, 6, 4, 0,
	11, 6, 4, 11, 4, 8, 10, 2, 9, 2, 0, 9,
	10, 4, 9, 6, 4, 10, 11, 2, 3,
	4, 8, 3, 4, 3, 10, 3, 1, 10, 6, 4, 10,
	1, 10, 0, 10, 6, 0, 6, 4, 0,
	4, 10, 6, 9, 10, 4, 0, 8, 3,
	4, 10, 6, 9, 10, 4,
	6, 7, 11, 4, 5, 9,
	4, 5, 9, 7, 11, 6, 3, 8, 0,
	1, 0, 5, 5, 0, 4, 11, 6, 7,
	11, 6, 7, 5, 8, 4, 5, 3, 8, 5, 1, 3,
	3, 2, 7, 7, 2, 6, 9, 4, 5,
	5, 9, 4, 0, 7, 8, 0, 6, 7, 0, 2, 6,
	3, 2, 6, 3, 6, 7, 1, 0, 5, 0, 4, 5,
	6, 1, 2, 5, 1, 6, 4, 7, 8,
	10, 2, 1, 6, 7, 11, 4, 5, 9,
	0, 3, 8, 4, 5, 9, 11, 6, 7, 10, 2, 1,
	7, 11, 6, 2, 5, 10, 2, 4, 5, 2, 0, 4,
	8, 4, 7, 5, 10, 6, 3, 11, 2,
	9, 4, 5, 7, 10, 6, 7, 1, 10, 7, 3, 1,
	10, 6, 5, 7, 8, 4, 1, 9, 0,
	4, 3, 0, 7, 3, 4, 6, 5, 10,
	10, 6, 5, 8, 4, 7,
	9, 6, 5, 9, 11, 6, 9, 8, 11,
	11, 6, 3, 3, 6, 0, 0, 6, 5, 0, 5, 9,
	11, 6, 5, 11, 5, 0, 5, 1, 0, 8, 11, 0,
	11, 6, 3, 6, 5, 3, 5, 1, 3,
	9, 8, 5, 8, 3, 2, 5, 8, 2, 5, 2, 6,
	5, 9, 6, 9, 0, 6, 0, 2, 6,
	1, 6, 5, 2, 6, 1, 3, 0, 8,
	1, 6, 5, 2, 6, 1,
	2, 1, 10, 9, 6, 5, 9, 11, 6, 9, 8, 11,
	9, 0, 1, 3, 11, 2, 5, 10, 6,
	11, 0, 8, 2, 0, 11, 10, 6, 5,
	3, 11, 2, 5, 10, 6,
	1, 8, 3, 9, 8, 1, 5, 10, 6,
	6, 5, 10, 0, 1, 9,
	8, 3, 0, 5, 10, 6,
	6, 5, 10,
	10, 5, 6,
	0, 3, 8, 6, 10, 5,
	10, 5, 6, 9, 1, 0,
	3, 8, 1, 1, 8, 9, 6, 10, 5,
	2, 11, 3, 6, 10, 5,
	8, 0, 11, 11, 0, 2, 5, 6, 10,
	1, 0, 9, 2, 11, 3, 6, 10, 5,
	5, 6, 10, 11, 1, 2, 11, 9, 1, 11, 8, 9,
	5, 6, 1, 1, 6, 2,
	5, 6, 1, 1, 6, 2, 8, 0, 3,
	6, 9, 5, 6, 0, 9, 6, 2, 0,
	6, 2, 5, 2, 3, 8, 5, 2, 8, 5, 8, 9,
	3, 6, 11, 3, 5, 6, 3, 1, 5,
	8, 0, 1, 8, 1, 6, 1, 5, 6, 11, 8, 6,
	11, 3, 6, 6, 3, 5, 5, 3, 0, 5, 0, 9,
	5, 6, 9, 6, 11, 9, 11, 8, 9,
	5, 6, 10, 7, 4, 8,
	0, 3, 4, 4, 3, 7, 10, 5, 6,
	5, 6, 10, 4, 8, 7, 0, 9, 1,
	6, 10, 5, 1, 4, 9, 1, 7, 4, 1, 3, 7,
	7, 4, 8, 6, 10, 5, 2, 11, 3,
	10, 5, 6, 4, 11, 7, 4, 2, 11, 4, 0, 2,
	4, 8, 7, 6, 10, 5, 3, 2, 11, 1, 0, 9,
	1, 2, 10, 11, 7, 6, 9, 5, 4,
	2, 1, 6, 6, 1, 5, 8, 7, 4,
	0, 3, 7, 0, 7, 4, 2, 1, 6, 1, 5, 6,
	8, 7, 4, 6, 9, 5, 6, 0, 9, 6, 2, 0,
	7, 2, 3, 6, 2, 7, 5, 4, 9,
	4, 8, 7, 3, 6, 11, 3, 5, 6, 3, 1, 5,
	5, 0, 1, 4, 0, 5, 7, 6, 11,
	9, 5, 4, 6, 11, 7, 0, 8, 3,
	11, 7, 6, 9, 5, 4,
	6, 10, 4, 4, 10, 9,
	6, 10, 4, 4, 10, 9, 3, 8, 0,
	0, 10, 1, 0, 6, 10, 0, 4, 6,
	6, 10, 1, 6, 1, 8, 1, 3, 8, 4, 6, 8,
	9, 4, 10, 10, 4, 6, 3, 2, 11,
	2, 11, 8, 2, 8, 0, 6, 10, 4, 10, 9, 4,
	11, 3, 2, 0, 10, 1, 0, 6, 10, 0, 4, 6,
	6, 8, 4, 11, 8, 6, 2, 10, 1,
	4, 1, 9, 4, 2, 1, 4, 6, 2,
	3, 8, 0, 4, 1, 9, 4, 2, 1, 4, 6, 2,
	6, 2, 4, 4, 2, 0,
	3, 8, 2, 8, 4, 2, 4, 6, 2,
	4, 6, 9, 6, 11, 3, 9, 6, 3, 9, 3, 1,
	8, 6, 11, 4, 6, 8, 9, 0, 1,
	11, 3, 6, 3, 0, 6, 0, 4, 6,
	8, 6, 11, 4, 6, 8,
	10, 7, 6, 10, 8, 7, 10, 9, 8,
	3, 7, 0, 7, 6, 10, 0, 7, 10, 0, 10, 9,
	6, 10, 7, 7, 10, 8, 8, 10, 1, 8, 1, 0,
	6, 10, 7, 10, 1, 7, 1, 3, 7,
	3, 2, 11, 10, 7, 6, 10, 8, 7, 10, 9, 8,
	2, 9, 0, 10, 9, 2, 6, 11, 7,
	0, 8, 3, 7, 6, 11, 1, 2, 10,
	7, 6, 11, 1, 2, 10,
	2, 1, 9, 2, 9, 7, 9, 8, 7, 6, 2, 7,
	2, 7, 6, 3, 7, 2, 0, 1, 9,
	8, 7, 0, 7, 6, 0, 6, 2, 0,
	7, 2, 3, 6, 2, 7,
	8, 1, 9, 3, 1, 8, 11, 7, 6,
	11, 7, 6, 1, 9, 0,
	6, 11, 7, 0, 8, 3,
	11, 7, 6,
	7, 11, 5, 5, 11, 10,
	10, 5, 11, 11, 5, 7, 0, 3, 8,
	7, 11, 5, 5, 11, 10, 0, 9, 1,
	7, 11, 10, 7, 10, 5, 3, 8, 1, 8, 9, 1,
	5, 2, 10, 5, 3, 2, 5, 7, 3,
	5, 7, 10, 7, 8, 0, 10, 7, 0, 10, 0, 2,
	0, 9, 1, 5, 2, 10, 5, 3, 2, 5, 7, 3,
	9, 7, 8, 5, 7, 9, 10, 1, 2,
	1, 11, 2, 1, 7, 11, 1, 5, 7,
	8, 0, 3, 1, 11, 2, 1, 7, 11, 1, 5, 7,
	7, 11, 2, 7, 2, 9, 2, 0, 9, 5, 7, 9,
	7, 9, 5, 8, 9, 7, 3, 11, 2,
	3, 1, 7, 7, 1, 5,
	8, 0, 7, 0, 1, 7, 1, 5, 7,
	0, 9, 3, 9, 5, 3, 5, 7, 3,
	9, 7, 8, 5, 7, 9,
	8, 5, 4, 8, 10, 5, 8, 11, 10,
	0, 3, 11, 0, 11, 5, 11, 10, 5, 4, 0, 5,
	1, 0, 9, 8, 5, 4, 8, 10, 5, 8, 11, 10,
	10, 3, 11, 1, 3, 10, 9, 5, 4,
	3, 2, 8, 8, 2, 4, 4, 2, 10, 4, 10, 5,
	10, 5, 2, 5, 4, 2, 4, 0, 2,
	5, 4, 9, 8, 3, 0, 10, 1, 2,
	2, 10, 1, 4, 9, 5,
	8, 11, 4, 11, 2, 1, 4, 11, 1, 4, 1, 5,
	0, 5, 4, 1, 5, 0, 2, 3, 11,
	0, 11, 2, 8, 11, 0, 4, 9, 5,
	5, 4, 9, 2, 3, 11,
	4, 8, 5, 8, 3, 5, 3, 1, 5,
	0, 5, 4, 1, 5, 0,
	5, 4, 9, 3, 0, 8,
	5, 4, 9,
	11, 4, 7, 11, 9, 4, 11, 10, 9,
	0, 3, 8, 11, 4, 7, 11, 9, 4, 11, 10, 9,
	11, 10, 7, 10, 1, 0, 7, 10, 0, 7, 0, 4,
	3, 10, 1, 11, 10, 3, 7, 8, 4,
	3, 2, 10, 3, 10, 4, 10, 9, 4, 7, 3, 4,
	9, 2, 10, 0, 2, 9, 8, 4, 7,
	3, 4, 7, 0, 4, 3, 1, 2, 10,
	7, 8, 4, 10, 1, 2,
	7, 11, 4, 4, 11, 9, 9, 11, 2, 9, 2, 1,
	1, 9, 0, 4, 7, 8, 2, 3, 11,
	7, 11, 4, 11, 2, 4, 2, 0, 4,
	4, 7, 8, 2, 3, 11,
	9, 4, 1, 4, 7, 1, 7, 3, 1,
	7, 8, 4, 1, 9, 0,
	3, 4, 7, 0, 4, 3,
	7, 8, 4,
	11, 10, 8, 8, 10, 9,
	0, 3, 9, 3, 11, 9, 11, 10, 9,
	1, 0, 10, 0, 8, 10, 8, 11, 10,
	10, 3, 11, 1, 3, 10,
	3, 2, 8, 2, 10, 8, 10, 9, 8,
	9, 2, 10, 0, 2, 9,
	8, 3, 0, 10, 1, 2,
	2, 10, 1,
	2, 1, 11, 1, 9, 11, 9, 8, 11,
	11, 2, 3, 9, 0, 1,
	11, 0, 8, 2, 0, 11,
	3, 11, 2,
	1, 8, 3, 9, 8, 1,
	1, 9, 0,
	8, 3, 0,
    // last element to index last offset (it is empty in reality)
    42
);


fn sphere_sdf(pos: vec3<f32>, radius: f32) -> f32 {
    return length(pos) - radius;
}

fn torus_sdf(pos: vec3<f32>, radius: vec2<f32>) -> f32 {
    let q = vec2<f32>(length(pos.xz) - radius.x, pos.y);
    return length(q) - radius.y;
}

fn scene_sdf(pos: vec3<f32>) -> f32 {
    return torus_sdf(pos, vec2f(0.5, 0.15));
}

@compute @workgroup_size(1, 1, 1)
fn compute_vertices(@builtin(global_invocation_id) invocation_id: vec3<u32>) { 
    let volume_size = volume.max_bound - volume.min_bound;
    let coord = vec3<f32>(invocation_id) * volume.voxel_size - volume_size / 2.0;

    var position: array<vec3<f32>, 8>;
    var mask: u32 = 0;
    for (var i: u32 = 0; i < 8; i++) {
        var offset: vec3<f32>;
        offset.x = f32((i & 1) >> 0);
        offset.y = f32((i & 2) >> 1);
        offset.z = f32((i & 4) >> 2);

        position[i] = coord + offset * volume.voxel_size;
        let inside = scene_sdf(position[i]) < 0;
        if (inside) {
            mask = mask | (1u << i);
        }
    }

    let count = vec3<u32>(floor(volume_size / volume.voxel_size));
    let idx = invocation_id.x + count.x * (invocation_id.y + count.y * invocation_id.z); 

    let start = TRIANGLE_OFFSET_TABLE[max(i32(mask) - 1, 0)];
    let end = TRIANGLE_OFFSET_TABLE[mask];
    for (var i = start; i < end; i++) {
        let edge_id = TRIANGLE_TABLE[i]; 
        let first = EDGE_VERTEX_IDS[edge_id].x;
        let second = EDGE_VERTEX_IDS[edge_id].y;
        output[12 * idx + i - start] = (position[first] + position[second]) * 0.5;
    }
}

